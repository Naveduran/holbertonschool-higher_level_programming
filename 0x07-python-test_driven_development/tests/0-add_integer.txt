# Import the function

>>> add_integer = __import__('0-add_integer').add_integer



# Import module to run bash scripts

>>> import os



# Proving output when sending integers and floats

>>> add_integer(5,100)
105

>>> add_integer(-5, 8)
3

>>> add_integer(30.1,30.2)
60

>>> add_integer(2, 4)
6



# Raise error if there are no parameters given

>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'



# Check output for only one parameter

>>> add_integer(2)
100



# Check output when parameters are strings

>>> add_integer("Hola", "Mundo")
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer("Hola", 1)
Traceback (most recent call last):
...
TypeError: a must be an integer

>>> add_integer(1, 'Hola')
Traceback (most recent call last):
...
TypeError: b must be an integer


# Check output when None is given

>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer



# Check existence of a readme

>>> with open('README.md') as f:
...     len(f.read()) > 1
True



# Check documentation of module and function

>>> len('0-add_integer'.__doc__) > 10
True

>>> len(add_integer.__doc__) > 10
True



# Check firstline

>>> with open('0-add_integer.py') as f:
...     f.readline()
'#!/usr/bin/python3\n'



# Check lastline

>>> with open('0-add_integer.py') as f:
...     print(f.read()[-1])
<BLANKLINE>
<BLANKLINE>



# Check style

>>> os.system('pep8 --count 0-add_integer.py')
0



# Check if file is executable

>>> os.access('0-add_integer.py', os.X_OK)
True
